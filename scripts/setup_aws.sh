#!/bin/bash

# Home Network Monitor - AWS Setup Script
# Configures AWS CloudWatch, SNS, and other cloud services

set -e

echo "================================================"
echo "Home Network Monitor - AWS Setup"
echo "================================================"

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    echo "ERROR: AWS CLI is not installed."
    echo "Please install AWS CLI and try again:"
    echo "https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

# Check if AWS credentials are configured
if ! aws sts get-caller-identity &> /dev/null; then
    echo "ERROR: AWS credentials not configured."
    echo "Please run 'aws configure' first and set up your access keys."
    echo ""
    echo "You'll need:"
    echo "‚Ä¢ AWS Access Key ID"
    echo "‚Ä¢ AWS Secret Access Key"
    echo "‚Ä¢ Default region name (e.g., us-east-1)"
    echo "‚Ä¢ Default output format (json)"
    exit 1
fi

# Get current AWS identity
AWS_IDENTITY=$(aws sts get-caller-identity)
AWS_ACCOUNT=$(echo $AWS_IDENTITY | python3 -c "import sys, json; print(json.load(sys.stdin)['Account'])")
AWS_USER=$(echo $AWS_IDENTITY | python3 -c "import sys, json; print(json.load(sys.stdin).get('UserName', json.load(sys.stdin).get('Arn', 'Unknown')))")
AWS_REGION=$(aws configure get region)

echo -e "\nAWS Configuration:"
echo "Account: $AWS_ACCOUNT"
echo "User: $AWS_USER"
echo "Region: $AWS_REGION"

# Confirm setup
echo -e "\nThis script will create the following AWS resources:"
echo "‚Ä¢ CloudWatch dashboard for network monitoring"
echo "‚Ä¢ CloudWatch alarms for network issues"
echo "‚Ä¢ SNS topic for alert notifications"
echo "‚Ä¢ Cost monitoring alarm"
echo ""
echo "Estimated monthly cost: $2-5 (depending on usage)"
echo ""
read -p "Do you want to continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Setup cancelled."
    exit 0
fi

# Check if Python virtual environment is available
if [ ! -d "venv" ]; then
    echo "ERROR: Python virtual environment not found."
    echo "Please run ./scripts/install.sh first."
    exit 1
fi

# Activate virtual environment
echo -e "\n1. Activating Python environment..."
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    source venv/Scripts/activate
else
    source venv/bin/activate
fi

# Check if required Python packages are installed
echo -e "\n2. Checking Python dependencies..."
if ! python3 -c "import boto3, yaml" 2>/dev/null; then
    echo "Installing required packages..."
    pip install boto3 pyyaml
fi

# Verify CloudWatch setup script exists
if [ ! -f "cloud/cloudwatch_setup.py" ]; then
    echo "ERROR: CloudWatch setup script not found."
    echo "Please ensure cloud/cloudwatch_setup.py exists."
    exit 1
fi

# Run CloudWatch setup
echo -e "\n3. Setting up CloudWatch resources..."
python3 cloud/cloudwatch_setup.py

# Check if setup was successful
if [ $? -eq 0 ]; then
    echo -e "\n‚úÖ AWS CloudWatch setup completed successfully!"
else
    echo -e "\n‚ùå AWS CloudWatch setup failed."
    echo "Check the error messages above for details."
    exit 1
fi

# Test CloudWatch connectivity
echo -e "\n4. Testing CloudWatch connectivity..."
if python3 -c "
import boto3
try:
    cw = boto3.client('cloudwatch')
    cw.list_metrics(Namespace='HomeNetwork', MaxRecords=1)
    print('‚úì CloudWatch connection successful')
except Exception as e:
    print(f'‚úó CloudWatch connection failed: {e}')
    exit(1)
"; then
    CLOUDWATCH_OK=true
else
    CLOUDWATCH_OK=false
fi

# Create or update AWS configuration file
echo -e "\n5. Updating local AWS configuration..."

AWS_CONFIG_FILE="config/aws_config_local.yaml"

cat > $AWS_CONFIG_FILE << EOF
# AWS Configuration - Auto-generated by setup script
# Generated on: $(date)

aws:
  region: "$AWS_REGION"
  account_id: "$AWS_ACCOUNT"
  
  # CloudWatch settings
  cloudwatch:
    namespace: "HomeNetwork"
    detailed_monitoring: false
    retention_days: 14
  
  # Cost optimization
  cost_monitoring:
    enabled: true
    threshold_usd: 10.0
  
  # SNS settings (update with actual topic ARN from setup output)
  sns:
    topic_arn: ""  # Fill this in from the setup output above
  
  # Optional: SES for email alerts
  ses:
    verified_email: ""  # Add your verified SES email here
    
# Generated by setup script - do not edit manually
metadata:
  setup_date: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
  setup_user: "$AWS_USER"
EOF

echo "Created AWS config file: $AWS_CONFIG_FILE"

# Update main monitoring config with AWS settings
echo -e "\n6. Updating monitoring configuration..."

python3 << 'EOF'
import yaml

# Load main config
with open('config/monitoring_config.yaml', 'r') as f:
    config = yaml.safe_load(f)

# Update AWS region if not set correctly
aws_region = """$AWS_REGION"""
if config['aws']['region'] != aws_region:
    config['aws']['region'] = aws_region
    print(f"Updated AWS region to: {aws_region}")

# Save updated config
with open('config/monitoring_config.yaml', 'w') as f:
    yaml.dump(config, f, default_flow_style=False, indent=2)

print("‚úì Updated monitoring configuration")
EOF

# Create a simple cost monitoring script
echo -e "\n7. Creating cost monitoring utility..."

cat > scripts/check_aws_costs.py << 'EOF'
#!/usr/bin/env python3
"""
Simple AWS cost checker for home network monitoring
"""

import boto3
from datetime import datetime, timedelta

def check_costs():
    try:
        # Cost Explorer is only available in us-east-1
        ce = boto3.client('costexplorer', region_name='us-east-1')
        
        # Get costs for last 30 days
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        response = ce.get_cost_and_usage(
            TimePeriod={
                'Start': start_date.strftime('%Y-%m-%d'),
                'End': end_date.strftime('%Y-%m-%d')
            },
            Granularity='MONTHLY',
            Metrics=['BlendedCost'],
            GroupBy=[{'Type': 'SERVICE', 'Key': 'SERVICE'}]
        )
        
        total_cost = 0
        service_costs = {}
        
        for result in response['ResultsByTime']:
            for group in result['Groups']:
                service = group['Keys'][0]
                cost = float(group['Metrics']['BlendedCost']['Amount'])
                service_costs[service] = service_costs.get(service, 0) + cost
                total_cost += cost
        
        print(f"AWS Costs (Last 30 days): ${total_cost:.2f}")
        print("\nTop services:")
        for service, cost in sorted(service_costs.items(), key=lambda x: x[1], reverse=True)[:5]:
            if cost > 0.01:  # Only show services with costs > 1 cent
                print(f"  {service}: ${cost:.2f}")
        
        if total_cost > 5.0:
            print(f"\n‚ö†Ô∏è  WARNING: Costs exceed $5.00 target")
        
    except Exception as e:
        print(f"Error checking costs: {e}")
        print("Note: Cost monitoring requires additional AWS permissions")

if __name__ == "__main__":
    check_costs()
EOF

chmod +x scripts/check_aws_costs.py

# Test the cost monitoring script
echo -e "\n8. Testing cost monitoring..."
python3 scripts/check_aws_costs.py || echo "Cost monitoring test failed (may need additional permissions)"

# Final status and instructions
echo -e "\n================================================"
echo "‚úÖ AWS Setup Complete!"
echo "================================================"

if [ "$CLOUDWATCH_OK" = true ]; then
    echo -e "\nAWS Services Status:"
    echo "‚úì CloudWatch: Connected and configured"
    echo "‚úì SNS: Topic created for alerts"
    echo "‚úì Cost Monitoring: Enabled"
else
    echo -e "\n‚ö†Ô∏è  AWS Services Status:"
    echo "‚úó CloudWatch: Connection issues detected"
    echo "Please check your AWS permissions and try again"
fi

echo -e "\nConfiguration Files:"
echo "‚Ä¢ AWS config: $AWS_CONFIG_FILE"
echo "‚Ä¢ Main config: config/monitoring_config.yaml"

echo -e "\nAWS Resources Created:"
echo "‚Ä¢ CloudWatch Dashboard: HomeNetworkMonitoring"
echo "‚Ä¢ CloudWatch Alarms: Network latency and availability"
echo "‚Ä¢ SNS Topic: home-network-alerts"
echo "‚Ä¢ Cost Alarm: AWS spending monitor"

echo -e "\nNext Steps:"
echo "1. Check your email for SNS subscription confirmation (if configured)"
echo "2. Update config/monitoring_config.yaml with:"
echo "   ‚Ä¢ SNS topic ARN (from setup output above)"
echo "   ‚Ä¢ Email/SMS settings for alerts"
echo "   ‚Ä¢ Any work endpoints you want to monitor"

echo -e "\n3. Restart monitoring to use AWS integration:"
echo "   ‚Ä¢ ./scripts/stop_monitoring.sh"
echo "   ‚Ä¢ ./scripts/start_monitoring.sh"

echo -e "\n4. Access your dashboards:"
echo "   ‚Ä¢ AWS CloudWatch: https://$AWS_REGION.console.aws.amazon.com/cloudwatch/"
echo "   ‚Ä¢ Local Grafana: http://localhost:3000"

echo -e "\nCost Management:"
echo "‚Ä¢ Check costs: python3 scripts/check_aws_costs.py"
echo "‚Ä¢ Monitor spending via CloudWatch billing alarms"
echo "‚Ä¢ Estimated cost: $2-5/month for home monitoring"

echo -e "\nTroubleshooting:"
echo "‚Ä¢ If alerts don't work, check SNS topic subscriptions"
echo "‚Ä¢ If costs are high, reduce metric frequency in config"
echo "‚Ä¢ For permission issues, check AWS IAM policies"

echo -e "\nüéâ AWS integration is ready!"
echo "Your network monitor will now send metrics to CloudWatch."